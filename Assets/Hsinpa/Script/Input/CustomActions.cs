//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Hsinpa/Script/Input/CustomActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Hsinpa
{
    public partial class @CustomActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CustomActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomActions"",
    ""maps"": [
        {
            ""name"": ""GameMode"",
            ""id"": ""d4a94d3a-130e-48db-a1e4-05aae248d0e3"",
            ""actions"": [
                {
                    ""name"": ""CaptureScreen"",
                    ""type"": ""Button"",
                    ""id"": ""9d0781b1-15a8-4098-b4cf-c1a9ceadebc6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""896cec95-623d-40d5-8af2-b46433dc5e2c"",
                    ""path"": ""<Keyboard>/#(P)"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CaptureScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""IdleMode"",
            ""id"": ""e1b073a2-776c-4f82-9654-535f2e2f39fa"",
            ""actions"": [
                {
                    ""name"": ""Awake"",
                    ""type"": ""Button"",
                    ""id"": ""91f113ba-0f30-4fb8-bef7-5fb67dde378c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""00317ab5-6135-473f-bbba-c87e1c615641"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Awake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0004b09f-55df-448a-8606-0b99032db3b1"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Awake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LoginMode"",
            ""id"": ""024148ed-08c9-4574-9ca1-4a1858daeb83"",
            ""actions"": [
                {
                    ""name"": ""NextAction"",
                    ""type"": ""Button"",
                    ""id"": ""1ff52e86-2ecd-4339-8586-920c64e92569"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""bb401ba8-ea9c-403c-b564-b1a5d75efac0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""9bc7d5c9-fe1a-40ed-809a-1425a78cbbe2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""56c35bd2-200a-4e4d-9adf-4d923d6dc9b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""bcdb880c-4f64-4610-9d1a-7f6ecbba6ff0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""b3a20124-410d-4cb8-8539-5db9fab7a181"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""671d0198-73dd-4cdd-8ea6-23debc8c0d3c"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3629102-e843-40ad-a122-64697f4bb7e1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2767685-eccc-485b-85a5-cc19dd9a8138"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b59ddb88-7a25-4b0c-aa18-45ecc360bb28"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a1cb639-dbbe-4bbb-9d3f-0f00ca33c987"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b566f32-db00-497d-9b72-07a2dbf47b05"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68012021-aa8a-4127-8acf-d6fee017c53f"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa8c0766-dab8-42f7-a99c-a3abf75cc095"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GameMode
            m_GameMode = asset.FindActionMap("GameMode", throwIfNotFound: true);
            m_GameMode_CaptureScreen = m_GameMode.FindAction("CaptureScreen", throwIfNotFound: true);
            // IdleMode
            m_IdleMode = asset.FindActionMap("IdleMode", throwIfNotFound: true);
            m_IdleMode_Awake = m_IdleMode.FindAction("Awake", throwIfNotFound: true);
            // LoginMode
            m_LoginMode = asset.FindActionMap("LoginMode", throwIfNotFound: true);
            m_LoginMode_NextAction = m_LoginMode.FindAction("NextAction", throwIfNotFound: true);
            m_LoginMode_Up = m_LoginMode.FindAction("Up", throwIfNotFound: true);
            m_LoginMode_Down = m_LoginMode.FindAction("Down", throwIfNotFound: true);
            m_LoginMode_Right = m_LoginMode.FindAction("Right", throwIfNotFound: true);
            m_LoginMode_Left = m_LoginMode.FindAction("Left", throwIfNotFound: true);
            m_LoginMode_Confirm = m_LoginMode.FindAction("Confirm", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GameMode
        private readonly InputActionMap m_GameMode;
        private IGameModeActions m_GameModeActionsCallbackInterface;
        private readonly InputAction m_GameMode_CaptureScreen;
        public struct GameModeActions
        {
            private @CustomActions m_Wrapper;
            public GameModeActions(@CustomActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @CaptureScreen => m_Wrapper.m_GameMode_CaptureScreen;
            public InputActionMap Get() { return m_Wrapper.m_GameMode; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameModeActions set) { return set.Get(); }
            public void SetCallbacks(IGameModeActions instance)
            {
                if (m_Wrapper.m_GameModeActionsCallbackInterface != null)
                {
                    @CaptureScreen.started -= m_Wrapper.m_GameModeActionsCallbackInterface.OnCaptureScreen;
                    @CaptureScreen.performed -= m_Wrapper.m_GameModeActionsCallbackInterface.OnCaptureScreen;
                    @CaptureScreen.canceled -= m_Wrapper.m_GameModeActionsCallbackInterface.OnCaptureScreen;
                }
                m_Wrapper.m_GameModeActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @CaptureScreen.started += instance.OnCaptureScreen;
                    @CaptureScreen.performed += instance.OnCaptureScreen;
                    @CaptureScreen.canceled += instance.OnCaptureScreen;
                }
            }
        }
        public GameModeActions @GameMode => new GameModeActions(this);

        // IdleMode
        private readonly InputActionMap m_IdleMode;
        private IIdleModeActions m_IdleModeActionsCallbackInterface;
        private readonly InputAction m_IdleMode_Awake;
        public struct IdleModeActions
        {
            private @CustomActions m_Wrapper;
            public IdleModeActions(@CustomActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Awake => m_Wrapper.m_IdleMode_Awake;
            public InputActionMap Get() { return m_Wrapper.m_IdleMode; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(IdleModeActions set) { return set.Get(); }
            public void SetCallbacks(IIdleModeActions instance)
            {
                if (m_Wrapper.m_IdleModeActionsCallbackInterface != null)
                {
                    @Awake.started -= m_Wrapper.m_IdleModeActionsCallbackInterface.OnAwake;
                    @Awake.performed -= m_Wrapper.m_IdleModeActionsCallbackInterface.OnAwake;
                    @Awake.canceled -= m_Wrapper.m_IdleModeActionsCallbackInterface.OnAwake;
                }
                m_Wrapper.m_IdleModeActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Awake.started += instance.OnAwake;
                    @Awake.performed += instance.OnAwake;
                    @Awake.canceled += instance.OnAwake;
                }
            }
        }
        public IdleModeActions @IdleMode => new IdleModeActions(this);

        // LoginMode
        private readonly InputActionMap m_LoginMode;
        private ILoginModeActions m_LoginModeActionsCallbackInterface;
        private readonly InputAction m_LoginMode_NextAction;
        private readonly InputAction m_LoginMode_Up;
        private readonly InputAction m_LoginMode_Down;
        private readonly InputAction m_LoginMode_Right;
        private readonly InputAction m_LoginMode_Left;
        private readonly InputAction m_LoginMode_Confirm;
        public struct LoginModeActions
        {
            private @CustomActions m_Wrapper;
            public LoginModeActions(@CustomActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @NextAction => m_Wrapper.m_LoginMode_NextAction;
            public InputAction @Up => m_Wrapper.m_LoginMode_Up;
            public InputAction @Down => m_Wrapper.m_LoginMode_Down;
            public InputAction @Right => m_Wrapper.m_LoginMode_Right;
            public InputAction @Left => m_Wrapper.m_LoginMode_Left;
            public InputAction @Confirm => m_Wrapper.m_LoginMode_Confirm;
            public InputActionMap Get() { return m_Wrapper.m_LoginMode; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LoginModeActions set) { return set.Get(); }
            public void SetCallbacks(ILoginModeActions instance)
            {
                if (m_Wrapper.m_LoginModeActionsCallbackInterface != null)
                {
                    @NextAction.started -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnNextAction;
                    @NextAction.performed -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnNextAction;
                    @NextAction.canceled -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnNextAction;
                    @Up.started -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnUp;
                    @Up.performed -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnUp;
                    @Up.canceled -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnUp;
                    @Down.started -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnDown;
                    @Down.performed -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnDown;
                    @Down.canceled -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnDown;
                    @Right.started -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnRight;
                    @Right.performed -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnRight;
                    @Right.canceled -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnRight;
                    @Left.started -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnLeft;
                    @Left.performed -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnLeft;
                    @Left.canceled -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnLeft;
                    @Confirm.started -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnConfirm;
                    @Confirm.performed -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnConfirm;
                    @Confirm.canceled -= m_Wrapper.m_LoginModeActionsCallbackInterface.OnConfirm;
                }
                m_Wrapper.m_LoginModeActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @NextAction.started += instance.OnNextAction;
                    @NextAction.performed += instance.OnNextAction;
                    @NextAction.canceled += instance.OnNextAction;
                    @Up.started += instance.OnUp;
                    @Up.performed += instance.OnUp;
                    @Up.canceled += instance.OnUp;
                    @Down.started += instance.OnDown;
                    @Down.performed += instance.OnDown;
                    @Down.canceled += instance.OnDown;
                    @Right.started += instance.OnRight;
                    @Right.performed += instance.OnRight;
                    @Right.canceled += instance.OnRight;
                    @Left.started += instance.OnLeft;
                    @Left.performed += instance.OnLeft;
                    @Left.canceled += instance.OnLeft;
                    @Confirm.started += instance.OnConfirm;
                    @Confirm.performed += instance.OnConfirm;
                    @Confirm.canceled += instance.OnConfirm;
                }
            }
        }
        public LoginModeActions @LoginMode => new LoginModeActions(this);
        public interface IGameModeActions
        {
            void OnCaptureScreen(InputAction.CallbackContext context);
        }
        public interface IIdleModeActions
        {
            void OnAwake(InputAction.CallbackContext context);
        }
        public interface ILoginModeActions
        {
            void OnNextAction(InputAction.CallbackContext context);
            void OnUp(InputAction.CallbackContext context);
            void OnDown(InputAction.CallbackContext context);
            void OnRight(InputAction.CallbackContext context);
            void OnLeft(InputAction.CallbackContext context);
            void OnConfirm(InputAction.CallbackContext context);
        }
    }
}
